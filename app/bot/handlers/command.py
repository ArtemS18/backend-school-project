import asyncio
import typing

from app.bot.keyboard import inline_button as kb
from app.bot.models.dataclasses import Answer
from app.game.models.play import Game, User
from app.store.tg_api.models import InlineKeyboardButton, InlineKeyboardMarkup, Message, SendMessage

if typing.TYPE_CHECKING:
    from app.bot.states.models import BotState
    from app.store.game.accessor import GameAccessor
    from app.web.app import Application


class CommandHandler:
    def __init__(self, app: "Application"):
        self.app = app
        self.telegram = app.store.tg_api
        self.fsm = app.bot.fsm
        self.states: "BotState" = app.bot.states
        self.db: "GameAccessor" = app.store.game
        self.answer_queues = app.bot.answer_queues

    async def start_command(self, message: Message) -> None:
        text = (
            "üéâ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –ß—Ç–æ? –ì–¥–µ? –ö–æ–≥–¥–∞?? \n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ª–æ–±–±–∏ –∫–æ–º–∞–Ω–¥–æ–π /create_game "
        )

        await self.telegram.send_message(
            SendMessage(chat_id=message.chat.id, text=text)
        )

        user = await self.db.get_chat_by_id(message.chat.id)
        if not user:
            await self.db.create_chat(message.chat.id)

        self.fsm.set_state(message.chat.id, self.states.creation_game)

    async def creation_game(self, message: Message) -> None:
        game: Game = await self.db.create_game(message.chat.id)

        if game:
            capitan = await self.db.get_capitan_by_game_id(game.id)
            answer = SendMessage(
                chat_id=message.chat.id,
                text=(
                    "üéÆ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ! \n"
                    f"üèÜ –†–∞—É–Ω–¥: {game.round}  –°—á—ë—Ç: {game.score_gamers}:{game.score_bot}\n"
                    f"–ö–∞–ø–∏—Ç–∞–Ω {capitan.username}\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å! ‚è©"
                ),
                reply_markup=kb.keyboard_start,
            )
            self.fsm.set_state(message.chat.id, self.states.start_game)
            await self.telegram.send_message(answer)
            return

        text = (
            f"‚ú® –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ @{message.from_user.username}! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å (3/1) —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã\n"
            f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n1) @{message.from_user.username} (–°–æ–∑–¥–∞—Ç–µ–ª—å)"
        )

        await self.db.add_user_to_game(
            User(id=message.from_user.id, 
                 username=message.from_user.username),
            message.chat.id,
        )

        answer = SendMessage(
            chat_id=message.chat.id,
            text=text,
            reply_markup=kb.keyboard_add,
        )

        await self.telegram.send_message(answer)
        self.fsm.set_state(message.chat.id, self.states.add_users)


    async def answer_command(self, message: Message) -> None:
        chat_id = message.chat.id
        text = message.text

        if not text:
            await self.telegram.send_message(
                SendMessage(
                    chat_id=chat_id,
                    text="–û—Ç–≤–µ—á–∞–π—Ç–µ –≥–æ—Å–ø–æ–¥–∏–Ω –î—Ä—É–∑—å!"
                )
            )
            return

        answer_text = text.strip()

        await self.answer_queues[chat_id].put(
            Answer(
                text=answer_text,
                chat_id=chat_id,
                user_id=message.from_user.id,
            )
        )

        await asyncio.sleep(2)
